name: Prepare Release
run-name: Preparing Release

on:
    workflow_dispatch:
    push:
        branches: master

jobs:
    checkVersion:
        name: Check that current package.json#version is not tagged
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.version.outputs.version }}
            dobuild: ${{ steps.dobuild.outputs.dobuild }}

        steps:
            - name: "Checkout SReject/libmek.git"
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Read package.json
              id: package
              uses: gregoranders/nodejs-project-info@v0.0.21

            - name: Extract version of package.json
              id: version
              run: echo "version=${{ steps.package.outputs.version }}" >> $GITHUB_OUTPUT

            - name: 'Check: package version does not have a corrosponding git tag'
              id: dobuild
              shell: bash
              run: echo dobuild=$(git show-ref --tags --verify --quiet -- "refs/tags/v${{ steps.version.outputs.version }}" && echo 0 || echo 1) >> $GITHUB_OUTPUT

    draftRelease:
        name: Draft github release
        needs: [checkVersion]
        if: needs.checkVersion.outputs.dobuild == 1
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repo
              uses: actions/checkout@v4

            - name: Setup Nodejs
              uses: actions/setup-node@v4
              with:
                node-version: '20'
                cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Compile release files
              run: npm run build

            - name: Draft Release
              uses: softprops/action-gh-release@v2
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                token: ${{ env.GITHUB_TOKEN }}
                draft: true
                prerelease: false
                generate_release_notes: true

                tag_name: v${{ needs.checkVersion.outputs.version }}
                name: libmek v${{ needs.checkVersion.outputs.version }}
                files: |
                    ./.dist/libmek.lua
                    ./.dist/libmek.min.lua